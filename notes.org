cat *.str | sort| uniq -c | sort -n

grep -h -A2 Pexp_ident *.str | sort | uniq -c | sort -n > ident.txt
grep -h -A2 Pexp_ident *.str | sed -e's/ //g' | sort | uniq -c | sort -n > ident.txt

extract the keys
grep -h -A2 : *.str | cut -d: -f1 | sed -e's/ //g' | sort | uniq -c | sort -n > keys.txt

grep -h -A2 : *.str | cut -d: -f1 | cut '-d"' -f1 | cut -d, -f1 | sed -e's/ //g' | sort | uniq -c | sort -n > keys2.txt
grep -h -A2 : *.str | cut -d: -f1 | cut '-d"' -f2 | cut -d, -f1 | sed -e's/ //g' | sort -u > uniq_keys.txt

now look at the right hand side of the : 
grep -h -A2 : *.str | cut -d: -f2- |    sort | uniq -c | sort -n > uniq_keys3.txt


now look for when the left hand side is in the right hand side


grep -F -f uniq_keys.txt uniq_keys3.txt | sort -n > uniq_keys_match.txt



grep -h -o -P '([A-Z][a-z]+_[a-z]+)' *.ml.str  | sort | uniq -c | sort -n > typenames.txt

look where they occur
grep -h -F -f typenamesu.txt *.str | sed -e's/ //g' | sort | uniq -c | sort -n > type_names2.txt 

* Summary

First we use our new ppx yojson converter to convert each ml file into a ml.str file.
https://github.com/meta-introspector/ocaml-libppx-import-yojson-introspector

We can process a given dune project like this
#+begin_src dune
(executable
 (public_name introspector_test)
 (name main)
  (preprocess (staged_pps ppx_import ppx_yojson_conv ppx_mina_introspector ))
#+end_src

after building the dune, it created a temporary ppx.exe we can reuse.
For example we use the one from our augmented ${PROJECT_BASE} like this 
#+begin_src shell
find -name \*.ml -exec ${PROJECT_BASE}/_build/default/.ppx/1977eb4d6c4f6ad3b912f65add506a08/ppx.exe  {} > /dev/null \;
#+end_src

Now we have the json files named .str,

We can inspect a given line like this, we know we are looking for Texp_construct starting on like 481

#+begin_src ocaml
    | Texp_construct (lid, _, args) ->
        Pexp_construct (map_loc sub lid,
          (match args with
              [] -> None
          | [ arg ] -> Some (sub.expr sub arg)
          | args ->
              Some
                (Exp.tuple ~loc (List.map (sub.expr sub) args))
          ))
#+end_src

#+begin_src shell
grep -C40 '"pos_lnum": 481,'  untypeast.ml.str  | grep Texp_construct -C10
#+end_src

We can see the ocaml json here
#+begin_src json
                                        {
                                          "pc_lhs": {
                                            "ppat_desc": [
                                              "Ppat_construct",
                                              "Texp_construct",
                                              [
                                                [],
                                                {
                                                  "ppat_desc": [
                                                    "Ppat_tuple",
                                                    [
                                                      {
                                                        "ppat_desc": [
                                                          "Ppat_var",
                                                          {
#+end_src

We're looking at the JSON representation of the OCaml AST, and we see the following structure:
```
"pc_lhs": {
    "ppat_desc": [
      "Ppat_construct",
      "Texp_construct",
```
Let's break down what each part of this structure represents:

* `pc_lhs`: This is the left-hand side of a pattern clause. In OCaml, a pattern clause is a way of specifying a pattern that can be used to match values. The left-hand side of a pattern clause is typically a pattern that is being matched against.
* `ppat_desc`: This is a description of the pattern. In OCaml, patterns can be complex expressions that involve multiple elements, such as constructors, variables, and literals. The `ppat_desc` field provides a description of the pattern being matched.
* `Ppat_construct`: This is a constructor pattern. In OCaml, a constructor pattern is a way of specifying a pattern that matches a specific constructor. Constructors are used to create new values of a specific type. For example, if we have a type `T` with a constructor `C`, we can use the pattern `Ppat_construct C` to match values of type `T` that are constructed using `C`.
* `Texp_construct`: This is a type expression constructor. In OCaml, a type expression is a way of specifying a type using a combination of type constructors and variables. The `Texp_construct` constructor is used to specify a type expression that is constructed using a specific type constructor.

So, in the context of our JSON output, we see that the `pc_lhs` field is specifying a pattern clause that matches a value of type `Texp_construct`. This suggests that the code is using a pattern matching construct to match values of this type.

Now, let's remember what we learned in our training about each part of this structure:

* We learned that `pc_lhs` is the left-hand side of a pattern clause, which is used to specify a pattern that can be matched against.
* We learned that `ppat_desc` is a description of the pattern, which can involve multiple elements such as constructors, variables, and literals.
* We learned that `Ppat_construct` is a constructor pattern, which is used to specify a pattern that matches a specific constructor.
* We learned that `Texp_construct` is a type expression constructor, which is used to specify a type expression that is constructed using a specific type constructor.

now we look for the definition

#+begin_src ocaml
and expression_desc =
...
| Texp_construct of
      Longident.t loc * constructor_description * expression list
#+end_src

#+begin_src json
              {
                "pcd_name": {"loc2": {"loc_start": {"pos_fname": "./typing/typedtree.ml","pos_lnum": 110, },
                  "txt2": "Texp_construct"                },
                "pcd_args": [
                  "Pcstr_tuple", [ { "ptyp_desc": [ "Ptyp_constr",],                {
                      "ptyp_desc": [  "Ptyp_constr", "constructor_description", []  ],
                    {"ptyp_desc": ["Ptyp_constr" "list",[{"ptyp_desc": [ "Ptyp_constr", "expression", [] ],
#+end_src

	      
convert to gron

#+begin_src shell
for x in *.str; do echo $x; gron $x > $x.gron; done
#+end_src

#+begin_src shell
cat *.ml.str.gron | perl split.pl | grep -F "pc_lhs.ppat_desc[1] " | cut -d= -f2 | sort | uniq -c | sort -n
#+end_src


* geting the sig
Now we noticed that we need pcd_name in the ocaml/parsing/parsetree.mli


#+begin_src shell
find -name \*.mli -exec ~/2024/08/14/dune/_build/default/.ppx/1977eb4d6c4f6ad3b912f65add506a08/ppx.exe  {} > /dev/null \;
#+end_src



#+begin_src json
        {
          "ptype_name": {
            "loc2": { "loc_start": {"pos_fname": "./parsing/parsetree.mli","pos_lnum": 584,}, },
            "txt2": "constructor_declaration"
          },
          "ptype_params": [],"ptype_cstrs": [],"ptype_kind": ["Ptype_record",
            [ {"pld_name": { "txt2": "pcd_name"  }, "pld_mutable": [ "Immutable" ],"pld_type": {"ptyp_desc": [
                    "Ptyp_constr",     "loc",
                    [ {
                        "ptyp_desc": [ "Ptyp_constr", "string", [] ],
                        "ptyp_loc_stack": [],"ptyp_attributes": []     }      ]
                  ],
                  "ptyp_loc_stack": [],
                  "ptyp_attributes": [] },
                "pld_attributes": []
              },
#+end_src

that comes from this line
#+begin_src ocaml
and constructor_declaration =
    {
     pcd_name: string loc;
#+end_src


Now we find the first homo iconic type

from parsing/parsetree.mli

#+begin_src ocaml
and label_declaration =
    {
     pld_name: string loc;
#+end_src

#+begin_src json
        {  "ptype_name": { "loc2": { "loc_start": {"pos_fname": "./parsing/parsetree.mli","pos_lnum": 565,              },
            "txt2": "label_declaration"          },
          "ptype_kind": [  "Ptype_record",    [              {
                "pld_name": {
                  "txt2": "pld_name"
                },
#+end_src

Now we can go to ptype_name

#+begin_src ocaml
and type_declaration =
    {
     ptype_name: string loc;

#+end_src

#+begin_src json
        {"ptype_name": {            "loc2": {              "loc_start": {                "pos_fname": "./parsing/parsetree.mli",                "pos_lnum": 520,              },         },
            "txt2": "type_declaration"  },
          "ptype_kind": [ "Ptype_record",
            [   { "pld_name": {             "loc2": {                    "loc_start": {                      "pos_fname": "./parsing/parsetree.mli",                      "pos_lnum": 522,
            },
           "txt2": "ptype_name"

#+end_src


the type kind is an inductive type of different records.
it contains the label declarations

and type_kind =
  | Ptype_abstract
  | Ptype_variant of constructor_declaration list
  | Ptype_record of label_declaration list  (** Invariant: non-empty list *)
  | Ptype_open

  Here is a shortened json.
#+begin_src json
        {
          "ptype_name": { "loc2": {  "loc_start": {  "pos_fname": "./parsing/parsetree.mli",  "pos_lnum": 559,            },
            "txt2": "type_kind"          },
          "ptype_kind": [
            "Ptype_variant",        [         {
                "pcd_name": {
                  "loc2": {
                    "loc_start": {
                      "pos_fname": "./parsing/parsetree.mli",
                      "pos_lnum": 560,                  },
                  "txt2": "Ptype_abstract"                },
                "pcd_args": [ "Pcstr_tuple", [] ],
              },
              {
                "pcd_name": {                  "txt2": "Ptype_variant"                },
                "pcd_args": [
                  "Pcstr_tuple",             [                    {
                      "ptyp_desc": [                        "Ptyp_constr",     "list",    [      {
                            "ptyp_desc": [
                              "Ptyp_constr", "constructor_declaration", []
                            ],                         }                        ]                      ],                    }
                  ]                ],
                "pcd_res": null,
                "pcd_attributes": []
              },
              {
                "pcd_name": {
                  "txt2": "Ptype_record"
                },
                "pcd_vars": [],
                "pcd_args": [
                  "Pcstr_tuple",
                  [
                    {
                      "ptyp_desc": [
                        "Ptyp_constr",
                        "list",
                        [
                          {
                            "ptyp_desc": [
                              "Ptyp_constr", "label_declaration", []
                            ],                          }                        ]                      ],                    }                  ]                ],
                "pcd_res": null,
                },
                "pcd_attributes": [
                  {
                    "attr_name": {
                      },
                      "txt2": "ocaml.doc"
                    },
                    "attr_payload": [
                      "PStr",
                      [
                        {
                          "pstr_desc": [
                            "Pstr_eval",
                            {
                              "pexp_desc": [
                                "Pexp_constant",
                                [
                                  "Pconst_string",
                                  " Invariant: non-empty list ",
                                ]                   ],                          },             ],
                        }                      ]                    ],                ]
              },
              {
                "pcd_name": {                  "txt2": "Ptype_open"                },
                "pcd_args": [ "Pcstr_tuple", [] ],
                },
              }
            ]
          ],
          "ptype_private": [ "Public" ],
        },
#+end_src
